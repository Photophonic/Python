ch01
verify in OSX, python3 --version

type python3 to get REPL to run commands >>>
(READ EVALUATE PRINT LOOP)
exit with quit()

Python is a highlevel language. Makes it easier to read/write


ch02
expressions - combination of values that evaluate to a single value
statements - perform operations on values

ch03
operators are symblos that perfom operations on values

ch04
name conventions, lower_case_word, data types and string functions

ch05
User input and control flow

ch06
List and Tuples
List hold multiple values for a user

ch07
dictionaries and sets. Data stored in key/value pairs
Sets do not allow for duplicates

ch08 loops
Two main types, for and while. 

ch09 functions
Functions are reuseable blocks of code

ch10 recursion
Recursion is a function that calls itself

ch11 scope
Notes in py files

ch12 closures
Closure is a function having access to the scope of its parent function after the parent function has returned.

ch13 fstring
Used to format str() output

ch14 modules
small code libraries based on related features

ch15 command line 
allow arguments to be passed in when run from CLI

ch16 - Challenges!!!
Three games to apply the stuff we have covered to this point

ch17 - Lambda and higher order functions
single expression functions  similar to anonymous functions in other languages. Handy for short lived operaionts where a full functon is not necessary.
Higher order functions are functions that can accept functions as an argument.

ch18 - Classes are like blueprints to create objects

ch19 - Errors and Exceptions

ch20 - OOP Project

ch21 - PIP and virtual environments
python3 -m pip install SOMETHING
list all packages with python3 -m pip list
these are global packages   

create virtual environents to get around issues of different versions of pip packages.
To activate the environents type, source .venv/bin/activate, terminal will show (.venv) when active.
to install a virtual environmen run python3 -m venv .venv (this is the name), to exti type exit or deactivate.

pip list can be used in the env.

python3 -m pip install python-dotenv
Python-dotenv reads key-value pairs from a .env file and can set them as environment variables.

python3 -m pip freeze > requirements.txt to create a requirements file

create an ignore file for git and name it .gitignore then list the folder or files you want to exclude, e.g. .venv